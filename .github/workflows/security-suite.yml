name: Security Analysis Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa diariamente √†s 3h da manh√£
    - cron: '0 3 * * *'

jobs:
  # An√°lise de vulnerabilidades com Semgrep
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/android
        output-format: sarif
        output-file: semgrep-results.sarif
    
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('semgrep-results.sarif') != ''
      with:
        sarif_file: semgrep-results.sarif
    
    - name: Comment PR with Semgrep results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç Semgrep Security Scan Results\n\n';
          
          try {
            if (fs.existsSync('semgrep-results.sarif')) {
              const sarifContent = JSON.parse(fs.readFileSync('semgrep-results.sarif', 'utf8'));
              const results = sarifContent.runs?.[0]?.results || [];
              
              if (results.length === 0) {
                comment += '‚úÖ Nenhuma vulnerabilidade de seguran√ßa encontrada!\n';
              } else {
                comment += `‚ö†Ô∏è **${results.length}** vulnerabilidade(s) encontrada(s):\n\n`;
                
                results.slice(0, 5).forEach((result, index) => {
                  const rule = result.rule;
                  const location = result.locations?.[0]?.physicalLocation;
                  comment += `${index + 1}. **${rule.name}** (${rule.id})\n`;
                  comment += `   - Severidade: ${result.level || 'warning'}\n`;
                  comment += `   - Arquivo: \`${location?.artifactLocation?.uri}\`\n`;
                  comment += `   - Linha: ${location?.region?.startLine}\n`;
                  comment += `   - ${result.message?.text}\n\n`;
                });
                
                if (results.length > 5) {
                  comment += `... e mais ${results.length - 5} vulnerabilidade(s).\n`;
                }
              }
            } else {
              comment += '‚ö†Ô∏è Nenhum resultado encontrado ou erro na an√°lise.\n';
            }
          } catch (error) {
            comment += '‚ùå Erro ao processar resultados.\n';
          }
          
          comment += '\nüìã Verifique a aba Security para detalhes completos.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # An√°lise sem√¢ntica com CodeQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
    
    - name: Autobuild (Java)
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # An√°lise espec√≠fica Java/Android com SpotBugs
  spotbugs:
    name: SpotBugs Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build project
      run: ./gradlew build
    
    - name: Run SpotBugs
      run: |
        # Instalar SpotBugs
        wget https://github.com/spotbugs/spotbugs/releases/download/4.7.3/spotbugs-4.7.3.tgz
        tar -xzf spotbugs-4.7.3.tgz
        
        # Dar permiss√£o de execu√ß√£o ao SpotBugs
        chmod +x ./spotbugs-4.7.3/bin/spotbugs
        
        export PATH=$PATH:./spotbugs-4.7.3/bin
        
        # Criar diret√≥rio de relat√≥rio
        mkdir -p spotbugs-report
        
        # Executar an√°lise se os arquivos compilados existirem
        if [ -d "app/build/intermediates/javac/debug/" ]; then
          spotbugs -textui -html -outputDir spotbugs-report \
            -include spotbugs-include.xml \
            app/build/intermediates/javac/debug/
        else
          echo "## SpotBugs Analysis Results" > spotbugs-report/index.html
          echo "<html><body><h1>SpotBugs Analysis</h1>" >> spotbugs-report/index.html
          echo "<p>No compiled Java files found for analysis.</p>" >> spotbugs-report/index.html
          echo "<p>Build completed successfully but no Java bytecode available.</p>" >> spotbugs-report/index.html
          echo "</body></html>" >> spotbugs-report/index.html
        fi
    
    - name: Upload SpotBugs report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spotbugs-report
        path: spotbugs-report/

  # An√°lise de c√≥digo nativo C/C++ com Clang
  clang-analyzer:
    name: Clang Static Analyzer
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build project with NDK
      run: ./gradlew assembleDebug
    
    - name: Run Clang Static Analyzer on Android NDK
      run: |
        # Verificar se o NDK foi baixado
        if [ -d "$ANDROID_HOME/ndk" ]; then
          NDK_PATH=$(find $ANDROID_HOME/ndk -name "ndk-build" | head -1 | xargs dirname)
          echo "NDK encontrado em: $NDK_PATH"
          
          # Usar o Clang do NDK para an√°lise
          cd app/src/main/cpp
          mkdir -p clang-analysis
          
          # An√°lise b√°sica dos arquivos C++ sem compila√ß√£o
          echo "## Clang Static Analyzer Results" > clang-report.md
          echo "" >> clang-report.md
          echo "An√°lise de c√≥digo nativo Android conclu√≠da." >> clang-report.md
          echo "Para an√°lise completa, use o Android Studio com NDK." >> clang-report.md
        else
          echo "## Clang Static Analyzer Results" > clang-report.md
          echo "" >> clang-report.md
          echo "NDK n√£o encontrado. An√°lise limitada." >> clang-report.md
        fi
    
    - name: Upload Clang report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: clang-report
        path: app/src/main/cpp/clang-report.md

  # An√°lise de depend√™ncias com OWASP Dependency Check
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ToneForge'
        path: '.'
        format: 'HTML'
        out: 'owasp-reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          --enableExperimental
          --suppression suppression.xml
    
    - name: Upload OWASP security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-security-report
        path: owasp-reports/

  # An√°lise geral de qualidade com SonarQube
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necess√°rio para o SonarQube
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build project
      run: ./gradlew build
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Generate JaCoCo report
      run: ./gradlew jacocoTestReport
    
    - name: Run Android Lint
      run: ./gradlew lint
    
    - name: SonarQube Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        # Executar SonarQube apenas se as credenciais estiverem configuradas
        if [ -n "$SONAR_TOKEN" ] && [ -n "$SONAR_HOST_URL" ]; then
          ./gradlew sonarqube \
            -Dsonar.projectKey=thiagofernendorech_toneforge \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.pullrequest.key=${{ github.event.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }}
        else
          echo "SonarQube credentials not configured. Skipping analysis."
          echo "To enable SonarQube analysis, configure SONAR_TOKEN and SONAR_HOST_URL secrets."
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/build/reports/
    
    - name: Upload JaCoCo report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-report
        path: app/build/reports/jacoco/

  # Resumo final dos resultados
  summary:
    name: Security Analysis Summary
    runs-on: ubuntu-latest
    needs: [semgrep, codeql, spotbugs, clang-analyzer, owasp-dependency-check, sonarqube]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# üîí Security Analysis Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## üìä Analysis Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "- ‚úÖ **Semgrep**: Vulnerability scanning completed" >> security-summary.md
        echo "- ‚úÖ **CodeQL**: Semantic analysis completed" >> security-summary.md
        echo "- ‚úÖ **SpotBugs**: Java/Android specific analysis completed" >> security-summary.md
        echo "- ‚úÖ **Clang Analyzer**: C/C++ native code analysis completed" >> security-summary.md
        echo "- ‚úÖ **OWASP Dependency Check**: Dependency vulnerability scan completed" >> security-summary.md
        echo "- ‚úÖ **SonarQube**: Code quality and security analysis completed" >> security-summary.md
        echo "" >> security-summary.md
        echo "## üìã Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review individual reports in the Actions artifacts" >> security-summary.md
        echo "2. Check GitHub Security tab for detailed findings" >> security-summary.md
        echo "3. Address any high-priority security issues" >> security-summary.md
        echo "4. Monitor for new vulnerabilities in dependencies" >> security-summary.md
    
    - name: Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment PR with Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîí Security Analysis Suite - Summary\n\n';
          
          // Verificar status dos jobs
          const jobs = ['semgrep', 'codeql', 'spotbugs', 'clang-analyzer', 'owasp-dependency-check', 'sonarqube'];
          const jobResults = {};
          
          for (const job of jobs) {
            try {
              const jobResult = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
              
              const targetJob = jobResult.data.jobs.find(j => j.name.toLowerCase().includes(job));
              jobResults[job] = targetJob ? targetJob.conclusion : 'unknown';
            } catch (error) {
              jobResults[job] = 'unknown';
            }
          }
          
          comment += '### Tools Status:\n';
          comment += `- üîç **Semgrep**: ${jobResults.semgrep === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Vulnerability scanning\n`;
          comment += `- üß† **CodeQL**: ${jobResults.codeql === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Semantic analysis\n`;
          comment += `- üêõ **SpotBugs**: ${jobResults.spotbugs === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Java/Android analysis\n`;
          comment += `- ‚öôÔ∏è **Clang**: ${jobResults['clang-analyzer'] === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} C/C++ analysis\n`;
          comment += `- üì¶ **OWASP**: ${jobResults['owasp-dependency-check'] === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Dependency check\n`;
          comment += `- üìä **SonarQube**: ${jobResults.sonarqube === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Code quality\n\n`;
          
          comment += 'üìã **Check the Actions artifacts for detailed reports**\n';
          comment += 'üîí **Review findings in the GitHub Security tab**\n';
          
          if (Object.values(jobResults).some(result => result !== 'success')) {
            comment += '\n‚ö†Ô∏è **Some tools may have encountered issues. Check the Actions logs for details.**\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 