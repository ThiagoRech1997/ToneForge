name: Semgrep Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Executa diariamente às 3h da manhã
    - cron: '0 3 * * *'

jobs:
  semgrep:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/android
        output-format: sarif
        output-file: semgrep-results.sarif
    
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep-results.sarif
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔍 Semgrep Security Scan Results\n\n';
          
          try {
            if (fs.existsSync('semgrep-results.sarif')) {
              const sarifContent = JSON.parse(fs.readFileSync('semgrep-results.sarif', 'utf8'));
              const results = sarifContent.runs?.[0]?.results || [];
              
              if (results.length === 0) {
                comment += '✅ Nenhuma vulnerabilidade de segurança encontrada!\n';
              } else {
                comment += `⚠️ **${results.length}** vulnerabilidade(s) encontrada(s):\n\n`;
                
                results.slice(0, 5).forEach((result, index) => {
                  const rule = result.rule;
                  const location = result.locations?.[0]?.physicalLocation;
                  comment += `${index + 1}. **${rule.name}** (${rule.id})\n`;
                  comment += `   - Severidade: ${result.level || 'warning'}\n`;
                  comment += `   - Arquivo: \`${location?.artifactLocation?.uri}\`\n`;
                  comment += `   - Linha: ${location?.region?.startLine}\n`;
                  comment += `   - ${result.message?.text}\n\n`;
                });
                
                if (results.length > 5) {
                  comment += `... e mais ${results.length - 5} vulnerabilidade(s).\n`;
                }
              }
            } else {
              comment += '⚠️ Nenhum resultado encontrado.\n';
            }
          } catch (error) {
            comment += '❌ Erro ao processar resultados.\n';
          }
          
          comment += '\n📋 Verifique a aba Security para detalhes completos.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 