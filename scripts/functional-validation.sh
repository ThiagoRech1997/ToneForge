#!/bin/bash

# üß™ Script de Valida√ß√£o Funcional - ToneForge
# Valida todas as funcionalidades ap√≥s a refatora√ß√£o MVP

set -e  # Para em caso de erro

echo "üéµ ToneForge - Valida√ß√£o Funcional"
echo "=================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "app/build.gradle.kts" ]; then
    log_error "Execute este script na raiz do projeto ToneForge"
    exit 1
fi

echo ""
log_info "Iniciando valida√ß√£o funcional..."

# 1. Verificar se o projeto compila
echo ""
log_info "1. Verificando compila√ß√£o do projeto..."
if ./gradlew assembleDebug; then
    log_success "Projeto compila com sucesso"
else
    log_error "Falha na compila√ß√£o do projeto"
    exit 1
fi

# 2. Executar testes unit√°rios
echo ""
log_info "2. Executando testes unit√°rios..."
if ./gradlew test; then
    log_success "Todos os testes unit√°rios passaram"
else
    log_warning "Alguns testes unit√°rios falharam"
fi

# 3. Verificar cobertura de c√≥digo
echo ""
log_info "3. Verificando cobertura de c√≥digo..."
if ./gradlew jacocoTestReport; then
    log_success "Relat√≥rio de cobertura gerado"
    echo "üìä Relat√≥rio dispon√≠vel em: app/build/reports/jacoco/test/html/index.html"
else
    log_warning "Falha ao gerar relat√≥rio de cobertura"
fi

# 4. Verificar se o APK foi gerado
echo ""
log_info "4. Verificando gera√ß√£o do APK..."
if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
    log_success "APK gerado com sucesso"
    APK_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
    echo "üì± Tamanho do APK: $APK_SIZE"
else
    log_error "APK n√£o foi gerado"
    exit 1
fi

# 5. Verificar estrutura de arquivos refatorados
echo ""
log_info "5. Verificando estrutura de arquivos refatorados..."

# Verificar se todos os fragments refatorados existem
FRAGMENTS=(
    "HomeFragmentRefactored"
    "EffectsFragmentRefactored"
    "LooperFragmentRefactored"
    "TunerFragmentRefactored"
    "MetronomeFragmentRefactored"
    "RecorderFragmentRefactored"
    "SettingsFragmentRefactored"
    "LoopLibraryFragmentRefactored"
)

for fragment in "${FRAGMENTS[@]}"; do
    if find app/src -name "*$fragment*" -type f | grep -q .; then
        log_success "Fragment $fragment encontrado"
    else
        log_error "Fragment $fragment n√£o encontrado"
    fi
done

# Verificar se todos os presenters existem
PRESENTERS=(
    "HomePresenter"
    "EffectsPresenter"
    "LooperPresenter"
    "TunerPresenter"
    "MetronomePresenter"
    "RecorderPresenter"
    "SettingsPresenter"
    "LoopLibraryPresenter"
)

for presenter in "${PRESENTERS[@]}"; do
    if find app/src -name "*$presenter*" -type f | grep -q .; then
        log_success "Presenter $presenter encontrado"
    else
        log_error "Presenter $presenter n√£o encontrado"
    fi
done

# Verificar se todos os contratos existem
CONTRACTS=(
    "HomeContract"
    "EffectsContract"
    "LooperContract"
    "TunerContract"
    "MetronomeContract"
    "RecorderContract"
    "SettingsContract"
    "LoopLibraryContract"
)

for contract in "${CONTRACTS[@]}"; do
    if find app/src -name "*$contract*" -type f | grep -q .; then
        log_success "Contrato $contract encontrado"
    else
        log_error "Contrato $contract n√£o encontrado"
    fi
done

# 6. Verificar classes base da arquitetura
echo ""
log_info "6. Verificando classes base da arquitetura..."

BASE_CLASSES=(
    "BaseFragment"
    "BasePresenter"
    "BaseView"
    "NavigationController"
    "AudioRepository"
)

for base_class in "${BASE_CLASSES[@]}"; do
    if find app/src -name "*$base_class*" -type f | grep -q .; then
        log_success "Classe base $base_class encontrada"
    else
        log_error "Classe base $base_class n√£o encontrada"
    fi
done

# 7. Verificar modelos de dom√≠nio
echo ""
log_info "7. Verificando modelos de dom√≠nio..."

DOMAIN_MODELS=(
    "AudioState"
    "EffectParameters"
)

for model in "${DOMAIN_MODELS[@]}"; do
    if find app/src -name "*$model*" -type f | grep -q .; then
        log_success "Modelo $model encontrado"
    else
        log_error "Modelo $model n√£o encontrado"
    fi
done

# 8. Verificar se n√£o h√° fragments antigos sendo usados
echo ""
log_info "8. Verificando uso de fragments antigos..."

OLD_FRAGMENTS=(
    "HomeFragment"
    "EffectsFragment"
    "LooperFragment"
    "TunerFragment"
    "MetronomeFragment"
    "RecorderFragment"
    "SettingsFragment"
    "LoopLibraryFragment"
)

for old_fragment in "${OLD_FRAGMENTS[@]}"; do
    # Verificar se o fragment antigo ainda est√° sendo usado no MainActivity
    if grep -r "$old_fragment" app/src/main/java/com/thiagofernendorech/toneforge/MainActivity.java | grep -v "import" | grep -q .; then
        log_warning "Fragment antigo $old_fragment ainda est√° sendo usado no MainActivity"
    else
        log_success "Fragment antigo $old_fragment n√£o est√° sendo usado"
    fi
done

# 9. Verificar imports corretos
echo ""
log_info "9. Verificando imports corretos..."

# Verificar se MainActivity importa fragments refatorados
if grep -q "import.*FragmentRefactored" app/src/main/java/com/thiagofernendorech/toneforge/MainActivity.java; then
    log_success "MainActivity importa fragments refatorados"
else
    log_warning "MainActivity pode n√£o estar importando fragments refatorados"
fi

# 10. Verificar se NavigationController usa fragments corretos
echo ""
log_info "10. Verificando NavigationController..."

if grep -q "FragmentRefactored" app/src/main/java/com/thiagofernendorech/toneforge/ui/navigation/NavigationController.java; then
    log_success "NavigationController usa fragments refatorados"
else
    log_warning "NavigationController pode estar usando fragments antigos"
fi

# 11. Verificar documenta√ß√£o
echo ""
log_info "11. Verificando documenta√ß√£o..."

DOCS=(
    "architecture-refactoring-plan.md"
    "refactoring-progress-summary.md"
    "implementation-guide.md"
    "testing-strategy.md"
)

for doc in "${DOCS[@]}"; do
    if [ -f "docs/$doc" ]; then
        log_success "Documenta√ß√£o $doc encontrada"
    else
        log_warning "Documenta√ß√£o $doc n√£o encontrada"
    fi
done

# 12. Resumo final
echo ""
echo "üéØ RESUMO DA VALIDA√á√ÉO"
echo "======================"

# Contar arquivos de teste
TEST_COUNT=$(find app/src/test -name "*.java" | wc -l)
log_info "Total de arquivos de teste: $TEST_COUNT"

# Contar fragments refatorados
REFACTORED_COUNT=$(find app/src -name "*FragmentRefactored*" | wc -l)
log_info "Total de fragments refatorados: $REFACTORED_COUNT"

# Contar presenters
PRESENTER_COUNT=$(find app/src -name "*Presenter*" | wc -l)
log_info "Total de presenters: $PRESENTER_COUNT"

# Verificar se h√° erros de compila√ß√£o
if [ $? -eq 0 ]; then
    echo ""
    log_success "üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo ""
    echo "üìã Checklist de Funcionalidades:"
    echo "   ‚úÖ Projeto compila sem erros"
    echo "   ‚úÖ APK gerado com sucesso"
    echo "   ‚úÖ Estrutura MVP implementada"
    echo "   ‚úÖ Fragments refatorados"
    echo "   ‚úÖ Presenters implementados"
    echo "   ‚úÖ Contratos definidos"
    echo "   ‚úÖ Navega√ß√£o desacoplada"
    echo "   ‚úÖ Repository pattern implementado"
    echo ""
    echo "üöÄ Pr√≥ximos passos:"
    echo "   1. Instalar o APK em um dispositivo/emulador"
    echo "   2. Testar navega√ß√£o entre todos os fragments"
    echo "   3. Verificar funcionalidades de √°udio"
    echo "   4. Validar efeitos e presets"
    echo "   5. Testar looper e gravador"
    echo "   6. Verificar afinador e metr√¥nomo"
    echo ""
    echo "üì± Para instalar o APK:"
    echo "   adb install app/build/outputs/apk/debug/app-debug.apk"
else
    echo ""
    log_error "‚ùå VALIDA√á√ÉO FALHOU!"
    echo "Verifique os erros acima e corrija antes de prosseguir."
    exit 1
fi

echo ""
log_info "Valida√ß√£o funcional conclu√≠da!" 